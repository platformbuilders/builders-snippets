{
	"Component functional React": {
		"prefix": "rfc",
		"body": [
			"import React, { FC } from 'react';",
			"// import { Wrapper } from './styles'; ",
			"",
			"type Props = {};",
			"",
			"const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}: FC<Props> = () => {",
			"  return <div />;",
			"};",
			"",
			"export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
			""
		],
		"description": "Create functional component from react"
	},
	"Container functional React": {
		"prefix": "rfcc",
		"body": [
			"import React, { FC } from 'react';",
			"// import ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} from './${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}'; ",
			"",
			"type Props = {};",
			"",
			"const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}Container: FC<Props> = () => {",
			"  return <${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} />;",
			"};",
			"",
			"export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}Container;",
			""
		],
		"description": "Container functional React"
	},
	"Container functional React Mobx": {
		"prefix": "rfcx",
		"body": [
			"import React, { FC } from 'react';",
			"import { inject, observer } from 'mobx-react';",
			"import ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} from './${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}'; ",
			"",
			"type Props = {",
			"	${2:store}: any",
			"};",
			"",
			"const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}Container:FC<Props> = () => {",
			"  return <${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} />;",
			"};",
			"",
			"export default inject('${2:store}')(observer(${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}Container));",
			""
		],
		"description": "Container functional React Mobx"
	},
	"Create useEffect": {
		"prefix": "useEffect",
		"body": [
			"useEffect(() => {",
				"$1",
			"},[$2]);"
		],
		"description": "Create useEffect"
	},
	"Create useState": {
		"prefix": "useState",
		"body": [
			"const [${1:value}, set${2:Value}] = useState(${3:null});" 
		],
		"description": "Create useState"
	},
	"Create import": {
		"prefix": "imp",
		"body": [
			"import { $1 } from '~/$2';"
		],
		"description": "Create import"
	},
	


	"Create Styles": {
		"prefix": "str",
		"body": [
			"import styled from 'styled-components';",
			"",
			"export const ${Wrapper} = styled.div``;"
		],
		"description": "Create styled structure"
	},
	"Styled component": {
		"prefix": "stc",
		"body": [
			"export const ${1:Component} = styled${2:.div}`$3`;"
		],
		"description": "Styled component"
	},
	"IfStyle structure": {
		"prefix": "ifs",
		"body": [
			"const $1 = ifStyle('$2');"
		],
		"description": "ifStyle structure"
	},
	"getTheme structure": {
		"prefix": "gt",
		"body": [
			"const ${property} = getTheme('${property}');"
		],
		"description": "getTheme structure"
	},
	"main color theme": {
		"prefix": "gtm",
		"body": [
			"const $1Main = getTheme('$1.main');"
		],
		"description": "main color theme"
	},
	"light color theme": {
		"prefix": "gtl",
		"body": [
			"const $1Light = getTheme('$1.light');"
		],
		"description": "colorLight theme"
	},
	"dark color theme": {
		"prefix": "gtd",
		"body": [
			"const $1Dark = getTheme('$1.dark');"
		],
		"description": "dark color theme"
	},
	"contrast color theme": {
		"prefix": "gtc",
		"body": [
			"const $1Contrast = getTheme('$1.contrast');"
		],
		"description": "contrast color theme"
	},
	"Create Typography": {
		"prefix": "stp",
		"body": [
			"export const ${1:Text} = styled(Typography).attrs({",
				"variant: '${2:body1}'",
			  "})``"
		],
		"description": "Create Typography"
	},
	"Get Small Radius": {
		"prefix": "gtsr",
		"body": [
			"const smallRadius = getTheme('smallRadius');"
		],
		"description": "Get smallRadius of theme "
	},
	"Get Medium Radius": {
		"prefix": "gtmr",
		"body": [
			"const mediumRadius = getTheme('mediumRadius');"
		],
		"description": "Get mediumRadius of theme "
	},
	"Get Large Radius": {
		"prefix": "gtlr",
		"body": [
			"const largeRadius = getTheme('largeRadius');"
		],
		"description": "Get largeRadius of theme "
	},
	"Get Small Spacing": {
		"prefix": "gtss",
		"body": [
			"const smallSpacing = getTheme('smallSpacing');"
		],
		"description": "Get smallSpacing of theme "
	},
	"Get Medium Spacing": {
		"prefix": "gtms",
		"body": [
			"const mediumSpacing = getTheme('mediumSpacing');"
		],
		"description": "Get mediumSpacing of theme "
	},
	"Get Large Spacing": {
		"prefix": "gtls",
		"body": [
			"const largeSpacing = getTheme('largeSpacing');"
		],
		"description": "Get largeSpacing of theme "
	},






	"Component functional RN": {
		"prefix": "rnfc",
		"body": [
			"import React, { FC } from 'react';",
			"import { View } from 'react-native';",
			"// import { Wrapper } from './styles'; ",
			"",
			"type Props = {}",
			"",
			"const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}: FC<Props> = () => {",
			"  return <View />;",
			"};",
			"",
			"export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};",
			""
		],
		"description": "Create functional component from react"
	},
	"Container functional RN": {
		"prefix": "rnfcc",
		"body": [
			"import React, { FC } from 'react';",
			"import ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} from './${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}'; ",
			"",
			"type Props = {};",
			"",
			"const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}Container: FC<Props> = () => {",
			"  return <${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} />;",
			"};",
			"",
			"export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}Container;",
			""
		],
		"description": "Container functional RN"
	},
	"Container functional RN Mobx": {
		"prefix": "rnfcx",
		"body": [
			"import React, { FC } from 'react';",
			"import { inject, observer } from 'mobx-react';",
			"import ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} from './${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}'; ",
			"",
			"type Props = {",
			"	${2:store}: any",
			"};",
			"",
			"const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}Container: FC<Props> = () => {",
			"  return <${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}} />;",
			"};",
			"",
			"export default inject('${2:store}')(observer(${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}Container));",
			""
		],
		"description": "Container functional RN Mobx"
	},




	"Create Styles RN": {
		"prefix": "rnstr",
		"body": [
			"import styled from 'styled-components/native';",
			"",
			"export const ${Wrapper} = styled.View``;"
		],
		"description": "Create styled structure"
	},
	"Get screen width and height": {
		"prefix": "dimensions",
		"body": [
			"const { width: screenWidth, height: screenHeight } = Dimensions.get('window');"
		],
		"description": "Get screen width and height"
	},



	"structure store mobx ": {
		"prefix": "store",
		"body": [
			"import { action, observable } from 'mobx';",
			"import { persist } from 'mobx-persist';",
			"",
			"type PropertyAction = {",
    		"    email: string;",
    		"    password: string;",
			"};",
			"",
			"export default class $1Store {",
			"",
			"@persist('object')",
			"@observable",
			"credentials: Partial<PropertyAction> = {};",
			"",
			"constructor() {",
			"// ...",
			"  }",
			"",
			"@action",
			"login = async ({ email, password }: PropertyAction): Promise<void> => {",
			"    this.credentials = { cpf, birthday };",
			"};",
			"}"
		],
		"description": "structure store mobx "
	}
}